// constants.js

// ゲームのフィールド（プレイエリア）の幅と高さを設定します。
// 横方向に12マス、縦方向に22マスのエリアでゲームが行われます。
export const W = 12; // フィールドの幅（横のマスの数）
export const H = 22; // フィールドの高さ（縦のマスの数）

// ブロックや背景の色を定義します。
// ゲームで使用する色を一覧にしています。
export const colors = [
  "#000000", // 黒色：背景または空白（ブロックがない部分）
  "#FFA500", // オレンジ色：特定のブロックの色
  "#0000FF", // 青色：特定のブロックの色
  "#800080", // 紫色：特定のブロックの色
  "#008000", // 緑色：特定のブロックの色
  "#FF0000", // 赤色：特定のブロックの色
  "#FFFF00", // 黄色：特定のブロックの色
  "#00FFFF", // 水色（シアン）：特定のブロックの色
  "#808080", // 灰色：壁などの固定部分の色
];

// ゲームで使用するブロックの形（テトリミノ）を定義します。
// 各ブロックは、回転したときの4つのパターンを持っています。
export const blocks = [
  // 1つ目のブロック：I字型（細長い形）
  [
    // 回転パターン0（初期の向き）
    [0, 0, 1, 1, 1, 1, 0, 0, 0],
    // 回転パターン1（右に90度回転）
    [0, 1, 0, 0, 1, 0, 0, 1, 1],
    // 回転パターン2（さらに90度回転）
    [0, 0, 0, 1, 1, 1, 1, 0, 0],
    // 回転パターン3（さらに90度回転）
    [1, 1, 0, 0, 1, 0, 0, 1, 0],
  ],
  // 2つ目のブロック：L字型
  [
    // 回転パターン0
    [2, 0, 0, 2, 2, 2, 0, 0, 0],
    // 回転パターン1
    [0, 2, 2, 0, 2, 0, 0, 2, 0],
    // 回転パターン2
    [0, 0, 0, 2, 2, 2, 0, 0, 2],
    // 回転パターン3
    [0, 2, 0, 0, 2, 0, 2, 2, 0],
  ],
  // 3つ目のブロック：T字型
  [
    // 回転パターン0
    [0, 3, 0, 3, 3, 3, 0, 0, 0],
    // 回転パターン1
    [0, 3, 0, 0, 3, 3, 0, 3, 0],
    // 回転パターン2
    [0, 0, 0, 3, 3, 3, 0, 3, 0],
    // 回転パターン3
    [0, 3, 0, 3, 3, 0, 0, 3, 0],
  ],
  // 4つ目のブロック：S字型
  [
    // 回転パターン0
    [4, 4, 0, 0, 4, 4, 0, 0, 0],
    // 回転パターン1
    [0, 0, 4, 0, 4, 4, 0, 4, 0],
    // 回転パターン2
    [0, 0, 0, 4, 4, 0, 0, 4, 4],
    // 回転パターン3
    [0, 4, 0, 4, 4, 0, 4, 0, 0],
  ],
  // 5つ目のブロック：Z字型
  [
    // 回転パターン0
    [0, 5, 5, 5, 5, 0, 0, 0, 0],
    // 回転パターン1
    [0, 5, 0, 0, 5, 5, 0, 0, 5],
    // 回転パターン2
    [0, 0, 0, 0, 5, 5, 5, 5, 0],
    // 回転パターン3
    [5, 0, 0, 5, 5, 0, 0, 5, 0],
  ],
  // 6つ目のブロック：O字型（正方形）
  [
    // このブロックは回転しても形が変わらないため、すべて同じです。
    [6, 6, 6, 6],
    [6, 6, 6, 6],
    [6, 6, 6, 6],
    [6, 6, 6, 6],
  ],
  // 7つ目のブロック：長いI字型
  [
    // 回転パターン0
    [0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0],
    // 回転パターン1
    [0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],
    // 回転パターン2
    [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0],
    // 回転パターン3
    [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0],
  ],
];
