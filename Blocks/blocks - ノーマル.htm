<!DOCTYPE html>
<html>
<head>
    <title>Blocks</title>
    <meta charset="utf-8" />
    <script type="text/javascript">
    "use strict";
    var ctx, paddle, ball, timer, blocks = [];
    var balls = 3, score = 0, elapsedTime = 0;
    var WIDTH = 600, HEIGHT = 600;
    var colors = ['red','orange','yellow','green','purple','blue'];

    function Ball() {
        this.x = 0;
        this.y = HEIGHT + this.r;    // エリア外に配置
        this.dx = 0;
        this.dy = 0;
        this.r = 10;
        this.dir = 0;
        this.speed = 4.2;  // ボールの初期速度を4.2に設定

        this.move = function () {
            this.x += this.dx;
            this.y += this.dy;
        }

        this.changeDir = function (dir) {
            this.dir = dir;
            this.dx = this.speed * Math.cos(dir);
            this.dy = - this.speed * Math.sin(dir);
        }

        this.draw = function (ctx) {
            drawBall(this.x, this.y, this.r);
        }
    }

    Block.prototype = Paddle.prototype = {
        draw: function (ctx) {
            ctx.fillStyle = this.color;
            ctx.fillRect(this.x, this.y, this.w, this.h);
        }
    }

    function Block(x, y, i) {
        this.x = x;
        this.y = y;
        this.w = 50;
        this.h = 20;
        this.color = colors[i];
        this.point = (6 - i) * 10;
    }

    function Paddle() {
        this.w = 110;
        this.h = 20;
        this.x = (WIDTH - this.w) / 2;
        this.y = HEIGHT - 20;
        this.color = 'yellow';
        this.keyL = false;
        this.keyR = false;
    }

    function init() {
        ctx = document.getElementById('canvas').getContext('2d');
        ctx.font = "20pt Arial";

        // イベントリスナーの初期化
        window.addEventListener('keydown', function (e) {
            toggleKey(e.keyCode, true);
        }, true);
        window.addEventListener('keyup', function (e) {
            toggleKey(e.keyCode, false);
        }, true);

        // プレイヤーの初期化
        paddle = new Paddle();
        ball = new Ball();
        start();

        if (isNaN(timer)) {
            timer = setInterval(mainLoop, 15);
        }

        // 経過時間スコアの初期化（1秒ごとに更新）
        setInterval(function () {
            elapsedTime++;
            ball.speed += 0.15;  // ボールの速度を0.15ずつ上げる
        }, 1000);
    }

    function toggleKey(code, flag) {
        switch (code) {
            case 37: paddle.keyL = flag; break;
            case 39: paddle.keyR = flag; break;
            case 32:
                if (!isPlaying()) {
                    ball.x = paddle.x + paddle.w / 2;
                    ball.y = paddle.y - ball.r;
                    ball.changeDir(Math.random() * Math.PI / 2 + Math.PI / 4);  // 45度～135度
                }
                break;
        }
    }

    function start() {
        paddle.w = Math.max(20, paddle.w - 10);
        ball.speed = Math.min(20, ball.speed + 1);

        // ブロックの配置
        for (var i = 0 ; i < 6 ; i++) {
            for (var j = 0 ; j < 9 ; j++) {
                blocks.push(new Block(j * 60 + 35, i * 30 + 50, i));
            }
        }
    }

    function mainLoop() {
        // パドルの移動
        if (paddle.keyL) {
            paddle.x = Math.max(0, paddle.x - 10);
        }
        if (paddle.keyR) {
            paddle.x = Math.min(WIDTH - paddle.w, paddle.x + 10);
        }

        draw();

        if (!isPlaying()) {
            return;
        }

        if (ball.y > HEIGHT - paddle.h) {
            // パドルに当たるか？
            if (paddle.x < ball.x && ball.x < paddle.x + paddle.w &&
                paddle.y < ball.y && ball.y < paddle.y + paddle.h) {
                var ratio = (paddle.x + paddle.w / 2 - ball.x) / paddle.w * 0.8;  // -0.4～0.4
                ball.changeDir(Math.PI / 2 + Math.PI * ratio);
            } else {
                if (--balls == 0) {   // ゲームオーバー
                    clearInterval(timer);
                    timer = NaN;
                    draw();
                    return;
                }
                ball.y = HEIGHT + ball.r;
                ball.speed = 4.2; // 残機が減ったらボールの速度を初期値に戻す
            }
        }

        var nx = ball.x + ball.dx;
        var ny = ball.y - ball.dy;

        // 壁に当たるか？
        if (ny < ball.r && ball.dy < 0) {
            ball.changeDir(ball.dir * -1);
        } else if (nx < ball.r || nx + ball.r > WIDTH) {
            ball.changeDir(Math.PI - ball.dir);
        }

        // ブロックに当たるか？
        var hit = -1;
        blocks.some(function (block, i) {
            if (block.x - ball.r < nx && nx < block.x + block.w + ball.r &&
                block.y - ball.r < ny && ny < block.y + block.h + ball.r) {
                hit = i;
                return true;
            }
            return false;
        });

        if (hit >= 0) {
            score += blocks[hit].point;  // スコアを加算
            blocks.splice(hit, 1);

            if (blocks.length <= 0) {  // 全ブロック破壊
                ball.y = HEIGHT + ball.r;
                start();
                return;
            }
            ball.changeDir(ball.dir * -1);
        }

        ball.move();
    }

    function isPlaying() {
        return ball.y < HEIGHT + ball.r;
    }

    function drawBall(x, y, r) {
        ctx.fillStyle = 'yellow';
        ctx.beginPath();
        ctx.arc(x, y, r, 0, Math.PI * 2, true);
        ctx.fill();
    }

    function draw() {
        // 背景の塗りつぶし
        ctx.fillStyle = 'rgb(0,0,0)';
        ctx.fillRect(0, 0, WIDTH, HEIGHT);

        // ブロックを描画
        blocks.forEach(function (block) {
            block.draw(ctx);
        });

        // パドルを描画
        paddle.draw(ctx);

        // ボールを描画
        ball.draw(ctx);

        // ボールの残機を右上に描画
        for (var i = 0; i < balls; i++) {
            drawBall(570 - i * 30, 30, 10);  // 右上に残機表示
        }

        // スコア、経過時間、難易度を画面上に描画
        ctx.fillStyle = 'rgb(0,255,0)';
        ctx.font = "14pt Arial";  // フォントサイズを14ptに設定
        ctx.fillText('スコア: ' + score + ' | 時間: ' + elapsedTime + '秒 | 難易度: ノーマル', 20, 30);  // スコア、時間、難易度表示（画面左上）

        // ゲームオーバー時のメッセージ
        if (isNaN(timer)) {
            ctx.fillText('ゲームオーバー', 220, 250); // ゲームオーバーの表示位置
            ctx.fillText('最終スコア: ' + score, 220, 300); // 最終スコアを表示
            ctx.fillText('経過時間: ' + elapsedTime + '秒', 220, 350); // 経過時間を表示
        }
    }

    </script>
</head>

<body onload="init()">
    <canvas id="canvas" width="600" height="600"></canvas>
</body>
</html>




